//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `OperationMode.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __OperationMode_h__
#define __OperationMode_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Config.h>
#include <Ice/StreamHelpers.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Ice
{
    /**
     * Determines the retry behavior an invocation in case of a (potentially) recoverable error.
     */
    enum class OperationMode : ::std::uint8_t
    {
        /**
         * Ordinary operations have <code>Normal</code> mode. These operations modify object state; invoking such an
         * operation twice in a row has different semantics than invoking it once. The Ice run time guarantees that it
         * will not violate at-most-once semantics for <code>Normal</code> operations.
         */
        Normal,
        /**
         * Operations that are <code>nonmutating</code> must not modify object state.
         * The Ice run-time no longer makes a distinction between nonmutating operations and idempotent operations.
         * Use the <code>idempotent</code> keyword instead.
         */
        Nonmutating [[deprecated("Use Idempotent instead.")]],
        /**
         * Operations that use the Slice <code>idempotent</code> keyword can modify object state, but invoking an
         * operation twice in a row must result in the same object state as invoking it once. For example,
         * <code>x = 1</code> is an idempotent statement, whereas <code>x += 1</code> is not. In addition, the Ice
         * run time will attempt to transparently recover from certain run-time errors by re-issuing a failed request
         * and propagate the failure to the application only if the second attempt fails.
         */
        Idempotent
    };

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Ice::OperationMode>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
