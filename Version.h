//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Version.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Version_h__
#define __Version_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Config.h>
#include <Ice/Comparable.h>
#include <cstdint>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Ice
{
    struct ProtocolVersion;

    struct EncodingVersion;

}

namespace Ice
{

/**
 * A version structure for the protocol version.
 */
struct ProtocolVersion
{
    ::std::uint8_t major;
    ::std::uint8_t minor;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::uint8_t&, const ::std::uint8_t&> ice_tuple() const
    {
        return std::tie(major, minor);
    }
};

/**
 * A version structure for the encoding version.
 */
struct EncodingVersion
{
    ::std::uint8_t major;
    ::std::uint8_t minor;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::uint8_t&, const ::std::uint8_t&> ice_tuple() const
    {
        return std::tie(major, minor);
    }
};

using Ice::Tuple::operator<;
using Ice::Tuple::operator<=;
using Ice::Tuple::operator>;
using Ice::Tuple::operator>=;
using Ice::Tuple::operator==;
using Ice::Tuple::operator!=;

}

#include <Ice/PopDisableWarnings.h>
#endif
