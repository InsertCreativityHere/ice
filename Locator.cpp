//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_API_EXPORTS
#   define ICE_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include "Locator.h"
#include <Ice/Process.h>
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::AdapterNotFoundException> iceC_Ice_AdapterNotFoundException_init("::Ice::AdapterNotFoundException");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::InvalidReplicaGroupIdException> iceC_Ice_InvalidReplicaGroupIdException_init("::Ice::InvalidReplicaGroupIdException");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::AdapterAlreadyActiveException> iceC_Ice_AdapterAlreadyActiveException_init("::Ice::AdapterAlreadyActiveException");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::ObjectNotFoundException> iceC_Ice_ObjectNotFoundException_init("::Ice::ObjectNotFoundException");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::ServerNotFoundException> iceC_Ice_ServerNotFoundException_init("::Ice::ServerNotFoundException");
}

::std::optional<::Ice::ObjectPrx>
Ice::LocatorPrx::findObjectById(const Identity& iceP_id, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(true, this, &LocatorPrx::_iceI_findObjectById, iceP_id, context).get();
}

::std::future<::std::optional<::Ice::ObjectPrx>>
Ice::LocatorPrx::findObjectByIdAsync(const Identity& iceP_id, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(false, this, &LocatorPrx::_iceI_findObjectById, iceP_id, context);
}

::std::function<void()>
Ice::LocatorPrx::findObjectByIdAsync(const Identity& iceP_id, ::std::function<void(::std::optional<::Ice::ObjectPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<::Ice::ObjectPrx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Ice::LocatorPrx::_iceI_findObjectById, iceP_id, context);
}

void
Ice::LocatorPrx::_iceI_findObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>& outAsync, const Identity& iceP_id, const Context& context) const
{
    static constexpr ::std::string_view operationName = "findObjectById";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::std::nullopt, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ObjectNotFoundException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}

::std::optional<::Ice::ObjectPrx>
Ice::LocatorPrx::findAdapterById(::std::string_view iceP_id, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(true, this, &LocatorPrx::_iceI_findAdapterById, iceP_id, context).get();
}

::std::future<::std::optional<::Ice::ObjectPrx>>
Ice::LocatorPrx::findAdapterByIdAsync(::std::string_view iceP_id, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(false, this, &LocatorPrx::_iceI_findAdapterById, iceP_id, context);
}

::std::function<void()>
Ice::LocatorPrx::findAdapterByIdAsync(::std::string_view iceP_id, ::std::function<void(::std::optional<::Ice::ObjectPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<::Ice::ObjectPrx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Ice::LocatorPrx::_iceI_findAdapterById, iceP_id, context);
}

void
Ice::LocatorPrx::_iceI_findAdapterById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>& outAsync, ::std::string_view iceP_id, const Context& context) const
{
    static constexpr ::std::string_view operationName = "findAdapterById";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::std::nullopt, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterNotFoundException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}

::std::optional<::Ice::LocatorRegistryPrx>
Ice::LocatorPrx::getRegistry(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<LocatorRegistryPrx>>(true, this, &LocatorPrx::_iceI_getRegistry, context).get();
}

::std::future<::std::optional<::Ice::LocatorRegistryPrx>>
Ice::LocatorPrx::getRegistryAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<LocatorRegistryPrx>>(false, this, &LocatorPrx::_iceI_getRegistry, context);
}

::std::function<void()>
Ice::LocatorPrx::getRegistryAsync(::std::function<void(::std::optional<::Ice::LocatorRegistryPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<LocatorRegistryPrx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Ice::LocatorPrx::_iceI_getRegistry, context);
}

void
Ice::LocatorPrx::_iceI_getRegistry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<LocatorRegistryPrx>>>& outAsync, const Context& context) const
{
    static constexpr ::std::string_view operationName = "getRegistry";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::std::nullopt, context,
        nullptr,
        nullptr);
}

const char*
Ice::LocatorPrx::ice_staticId() noexcept
{
    return "::Ice::Locator";
}

void
Ice::LocatorRegistryPrx::setAdapterDirectProxy(::std::string_view iceP_id, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &LocatorRegistryPrx::_iceI_setAdapterDirectProxy, iceP_id, iceP_proxy, context).get();
}

::std::future<void>
Ice::LocatorRegistryPrx::setAdapterDirectProxyAsync(::std::string_view iceP_id, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &LocatorRegistryPrx::_iceI_setAdapterDirectProxy, iceP_id, iceP_proxy, context);
}

::std::function<void()>
Ice::LocatorRegistryPrx::setAdapterDirectProxyAsync(::std::string_view iceP_id, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Ice::LocatorRegistryPrx::_iceI_setAdapterDirectProxy, iceP_id, iceP_proxy, context);
}

void
Ice::LocatorRegistryPrx::_iceI_setAdapterDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, ::std::string_view iceP_id, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const Context& context) const
{
    static constexpr ::std::string_view operationName = "setAdapterDirectProxy";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::std::nullopt, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_proxy);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterNotFoundException&)
            {
                throw;
            }
            catch(const AdapterAlreadyActiveException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}

void
Ice::LocatorRegistryPrx::setReplicatedAdapterDirectProxy(::std::string_view iceP_adapterId, ::std::string_view iceP_replicaGroupId, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &LocatorRegistryPrx::_iceI_setReplicatedAdapterDirectProxy, iceP_adapterId, iceP_replicaGroupId, iceP_proxy, context).get();
}

::std::future<void>
Ice::LocatorRegistryPrx::setReplicatedAdapterDirectProxyAsync(::std::string_view iceP_adapterId, ::std::string_view iceP_replicaGroupId, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &LocatorRegistryPrx::_iceI_setReplicatedAdapterDirectProxy, iceP_adapterId, iceP_replicaGroupId, iceP_proxy, context);
}

::std::function<void()>
Ice::LocatorRegistryPrx::setReplicatedAdapterDirectProxyAsync(::std::string_view iceP_adapterId, ::std::string_view iceP_replicaGroupId, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Ice::LocatorRegistryPrx::_iceI_setReplicatedAdapterDirectProxy, iceP_adapterId, iceP_replicaGroupId, iceP_proxy, context);
}

void
Ice::LocatorRegistryPrx::_iceI_setReplicatedAdapterDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, ::std::string_view iceP_adapterId, ::std::string_view iceP_replicaGroupId, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const Context& context) const
{
    static constexpr ::std::string_view operationName = "setReplicatedAdapterDirectProxy";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::std::nullopt, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_adapterId, iceP_replicaGroupId, iceP_proxy);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterNotFoundException&)
            {
                throw;
            }
            catch(const InvalidReplicaGroupIdException&)
            {
                throw;
            }
            catch(const AdapterAlreadyActiveException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}

void
Ice::LocatorRegistryPrx::setServerProcessProxy(::std::string_view iceP_id, const ::std::optional<ProcessPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &LocatorRegistryPrx::_iceI_setServerProcessProxy, iceP_id, iceP_proxy, context).get();
}

::std::future<void>
Ice::LocatorRegistryPrx::setServerProcessProxyAsync(::std::string_view iceP_id, const ::std::optional<ProcessPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &LocatorRegistryPrx::_iceI_setServerProcessProxy, iceP_id, iceP_proxy, context);
}

::std::function<void()>
Ice::LocatorRegistryPrx::setServerProcessProxyAsync(::std::string_view iceP_id, const ::std::optional<ProcessPrx>& iceP_proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Ice::LocatorRegistryPrx::_iceI_setServerProcessProxy, iceP_id, iceP_proxy, context);
}

void
Ice::LocatorRegistryPrx::_iceI_setServerProcessProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, ::std::string_view iceP_id, const ::std::optional<ProcessPrx>& iceP_proxy, const Context& context) const
{
    static constexpr ::std::string_view operationName = "setServerProcessProxy";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::std::nullopt, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_proxy);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ServerNotFoundException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}

const char*
Ice::LocatorRegistryPrx::ice_staticId() noexcept
{
    return "::Ice::LocatorRegistry";
}

::std::optional<::Ice::LocatorPrx>
Ice::LocatorFinderPrx::getLocator(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<LocatorPrx>>(true, this, &LocatorFinderPrx::_iceI_getLocator, context).get();
}

::std::future<::std::optional<::Ice::LocatorPrx>>
Ice::LocatorFinderPrx::getLocatorAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<LocatorPrx>>(false, this, &LocatorFinderPrx::_iceI_getLocator, context);
}

::std::function<void()>
Ice::LocatorFinderPrx::getLocatorAsync(::std::function<void(::std::optional<::Ice::LocatorPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<LocatorPrx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Ice::LocatorFinderPrx::_iceI_getLocator, context);
}

void
Ice::LocatorFinderPrx::_iceI_getLocator(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<LocatorPrx>>>& outAsync, const Context& context) const
{
    static constexpr ::std::string_view operationName = "getLocator";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

const char*
Ice::LocatorFinderPrx::ice_staticId() noexcept
{
    return "::Ice::LocatorFinder";
}

const char*
Ice::AdapterNotFoundException::ice_staticId() noexcept
{
    return "::Ice::AdapterNotFoundException";
}

const char*
Ice::AdapterNotFoundException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Ice::AdapterNotFoundException::ice_throw() const
{
    throw *this;
}

void
Ice::AdapterNotFoundException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
Ice::AdapterNotFoundException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

const char*
Ice::InvalidReplicaGroupIdException::ice_staticId() noexcept
{
    return "::Ice::InvalidReplicaGroupIdException";
}

const char*
Ice::InvalidReplicaGroupIdException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Ice::InvalidReplicaGroupIdException::ice_throw() const
{
    throw *this;
}

void
Ice::InvalidReplicaGroupIdException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
Ice::InvalidReplicaGroupIdException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

const char*
Ice::AdapterAlreadyActiveException::ice_staticId() noexcept
{
    return "::Ice::AdapterAlreadyActiveException";
}

const char*
Ice::AdapterAlreadyActiveException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Ice::AdapterAlreadyActiveException::ice_throw() const
{
    throw *this;
}

void
Ice::AdapterAlreadyActiveException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
Ice::AdapterAlreadyActiveException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

const char*
Ice::ObjectNotFoundException::ice_staticId() noexcept
{
    return "::Ice::ObjectNotFoundException";
}

const char*
Ice::ObjectNotFoundException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Ice::ObjectNotFoundException::ice_throw() const
{
    throw *this;
}

void
Ice::ObjectNotFoundException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
Ice::ObjectNotFoundException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

const char*
Ice::ServerNotFoundException::ice_staticId() noexcept
{
    return "::Ice::ServerNotFoundException";
}

const char*
Ice::ServerNotFoundException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Ice::ServerNotFoundException::ice_throw() const
{
    throw *this;
}

void
Ice::ServerNotFoundException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
Ice::ServerNotFoundException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

::std::vector<::std::string>
Ice::Locator::ice_ids(const Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Locator", "::Ice::Object"};
    return allTypeIds;
}

::std::string
Ice::Locator::ice_id(const Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Ice::Locator::ice_staticId() noexcept
{
    return "::Ice::Locator";
}

/// \cond INTERNAL
void
Ice::Locator::_iceD_findObjectById(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    Identity iceP_id;
    istr->readAll(iceP_id);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const ::std::optional<::Ice::ObjectPrx>& ret)
    {
        responseHandler->sendResponse(
            [&](::Ice::OutputStream* ostr)
            {
                ostr->writeAll(ret);
            });
    };
    try
    {
        this->findObjectByIdAsync(::std::move(iceP_id), ::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Ice::Locator::_iceD_findAdapterById(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const ::std::optional<::Ice::ObjectPrx>& ret)
    {
        responseHandler->sendResponse(
            [&](::Ice::OutputStream* ostr)
            {
                ostr->writeAll(ret);
            });
    };
    try
    {
        this->findAdapterByIdAsync(::std::move(iceP_id), ::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Ice::Locator::_iceD_getRegistry(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const ::std::optional<LocatorRegistryPrx> ret = this->getRegistry(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Ice::Locator::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"findAdapterById", "findObjectById", "getRegistry", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 7, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_findAdapterById(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_findObjectById(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_getRegistry(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Ice::LocatorRegistry::ice_ids(const Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::LocatorRegistry", "::Ice::Object"};
    return allTypeIds;
}

::std::string
Ice::LocatorRegistry::ice_id(const Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Ice::LocatorRegistry::ice_staticId() noexcept
{
    return "::Ice::LocatorRegistry";
}

/// \cond INTERNAL
void
Ice::LocatorRegistry::_iceD_setAdapterDirectProxy(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::string iceP_id;
    ::std::optional<::Ice::ObjectPrx> iceP_proxy;
    istr->readAll(iceP_id, iceP_proxy);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    try
    {
        this->setAdapterDirectProxyAsync(::std::move(iceP_id), ::std::move(iceP_proxy), [responseHandler] { responseHandler->sendEmptyResponse(); }, [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorRegistry::_iceD_setReplicatedAdapterDirectProxy(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::string iceP_adapterId;
    ::std::string iceP_replicaGroupId;
    ::std::optional<::Ice::ObjectPrx> iceP_proxy;
    istr->readAll(iceP_adapterId, iceP_replicaGroupId, iceP_proxy);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    try
    {
        this->setReplicatedAdapterDirectProxyAsync(::std::move(iceP_adapterId), ::std::move(iceP_replicaGroupId), ::std::move(iceP_proxy), [responseHandler] { responseHandler->sendEmptyResponse(); }, [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorRegistry::_iceD_setServerProcessProxy(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::string iceP_id;
    ::std::optional<ProcessPrx> iceP_proxy;
    istr->readAll(iceP_id, iceP_proxy);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    try
    {
        this->setServerProcessProxyAsync(::std::move(iceP_id), ::std::move(iceP_proxy), [responseHandler] { responseHandler->sendEmptyResponse(); }, [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorRegistry::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "setAdapterDirectProxy", "setReplicatedAdapterDirectProxy", "setServerProcessProxy"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 7, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_setAdapterDirectProxy(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_setReplicatedAdapterDirectProxy(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_setServerProcessProxy(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Ice::LocatorFinder::ice_ids(const Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::LocatorFinder", "::Ice::Object"};
    return allTypeIds;
}

::std::string
Ice::LocatorFinder::ice_id(const Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Ice::LocatorFinder::ice_staticId() noexcept
{
    return "::Ice::LocatorFinder";
}

/// \cond INTERNAL
void
Ice::LocatorFinder::_iceD_getLocator(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const ::std::optional<LocatorPrx> ret = this->getLocator(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorFinder::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"getLocator", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_getLocator(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
